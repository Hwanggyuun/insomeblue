import React, { useState, useEffect } from "react";
import styles from "./portfoliomiddle.module.css";
import Pagination from "./Pagination/Pagination";
import { storage } from "../../../firebase"; // ‚úÖ Firebase ÏÑ§Ï†ï Í∞ÄÏ†∏Ïò§Í∏∞
import { ref, listAll, getDownloadURL, getMetadata } from "firebase/storage";

type ImageCategories =
  | "conference"
  | "golf"
  | "online"
  | "offline"
  | "promotion";

const categories: ImageCategories[] = [
  "conference",
  "promotion",
  "offline",
  "online",
  "golf",
];

const categoryLabels: Record<ImageCategories, string> = {
  conference: "Ïª®ÌçºÎü∞Ïä§/ÏÑ∏ÎØ∏ÎÇò",
  promotion: "Ï†ÑÏãú/Í∏∞Ìöç/ÌîÑÎ°úÎ™®ÏÖò",
  offline: "Ïò§ÌîÑÎùºÏù∏ ÌñâÏÇ¨/ÏÇ¨ÎÇ¥ Ïù¥Î≤§Ìä∏",
  online: "Ïò®ÎùºÏù∏ ÌîÑÎ°úÎ™®ÏÖò/Ïõ®ÎπÑÎÇò",
  golf: "Í≥®ÌîÑ ÌñâÏÇ¨",
};

const PortfolioMiddle: React.FC = () => {
  const [images, setImages] = useState<string[]>([]);
  const [selectedCategory, setSelectedCategory] =
    useState<ImageCategories>("conference");
  const [currentPage, setCurrentPage] = useState<number>(1);
  const imagesPerPage = 8;
  const [loading, setLoading] = useState<boolean>(false);

  // ‚úÖ Firebase StorageÏóêÏÑú ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Ïù¥ÎØ∏ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchImagesFromStorage = async (category: ImageCategories) => {
    setLoading(true);
    try {
      const folderRef = ref(storage, `/${category}/`);
      const fileList = await listAll(folderRef);

      // ‚úÖ `getMetadata()`Î°ú Îπ†Î•¥Í≤å ÌååÏùº Í≤ΩÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞
      const urls = await Promise.all(
        fileList.items.map(async (file) => {
          const metadata = await getMetadata(file); // üî• getMetadata() ÌôúÏö©
          return metadata.fullPath; // ‚úÖ ÌååÏùºÏùò Ï†ÑÏ≤¥ Í≤ΩÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞
        })
      );

      // ‚úÖ `getDownloadURL()`ÏùÑ ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨ÌïòÏó¨ ÏÑ±Îä• ÏµúÏ†ÅÌôî
      const downloadUrls = await Promise.all(
        urls.map(async (path) => {
          return await getDownloadURL(ref(storage, path));
        })
      );

      setImages(downloadUrls);
    } catch (error) {
      console.error("üî• Error fetching images:", error);
      setImages([]);
    }
    setLoading(false);
  };

  // ‚úÖ Ï≤´ Î≤àÏß∏ Î°úÎî© Ïãú Í∏∞Î≥∏ Ïπ¥ÌÖåÍ≥†Î¶¨(`conference`)Ïùò Ïù¥ÎØ∏ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    fetchImagesFromStorage(selectedCategory);
  }, []);

  // ‚úÖ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Î≥ÄÍ≤ΩÌïòÎ©¥ Ìï¥Îãπ Ìè¥ÎçîÏóêÏÑú ÏÉà Ïù¥ÎØ∏ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞
  const handleCategoryChange = (category: ImageCategories) => {
    if (category === selectedCategory) return;
    setSelectedCategory(category);
    setCurrentPage(1);
    fetchImagesFromStorage(category);
  };

  // ‚úÖ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ï†ÅÏö©
  const totalImages = images.length;
  const totalPages = Math.ceil(totalImages / imagesPerPage);
  const displayedImages = images.slice(
    (currentPage - 1) * imagesPerPage,
    currentPage * imagesPerPage
  );

  return (
    <div className={styles.Box}>
      <div className={styles.Top}>Ï¥ù {totalImages}Í∞ú</div>
      <div className={styles.middlebox}>
        <div className={styles.middletop}>
          {categories.map((category) => (
            <div
              key={category}
              className={
                selectedCategory === category ? styles.blue : styles.middleitem
              }
              onClick={() => handleCategoryChange(category)}
            >
              {categoryLabels[category]}
            </div>
          ))}
        </div>
        <div className={styles.imgbox}>
          {loading ? (
            <div className={styles.skeletonContainer}>
              <div className={styles.skeleton}></div>
              <div className={styles.skeleton}></div>
              <div className={styles.skeleton}></div>
            </div>
          ) : (
            displayedImages.map((url, index) => (
              <div key={index} className={styles.imgcontent}>
                <img
                  className={styles.img}
                  src={url}
                  alt={`img-${index}`}
                  loading="lazy"
                />
              </div>
            ))
          )}
        </div>

        <Pagination
          total={totalPages}
          currentPage={currentPage}
          setPage={setCurrentPage}
        />
        <div className={styles.last}>
          If you can imagine it, we can create it!
        </div>
      </div>
    </div>
  );
};

export default PortfolioMiddle;
